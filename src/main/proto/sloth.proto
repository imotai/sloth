syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.microstack.sloth";
option java_outer_classname = "SlothNodeProto";
option objc_class_prefix = "HLW";

package sloth;

// the global rpc status
enum RpcStatus {
  // make rpc successfully
  kRpcOk = 0;
  kRpcRejected = 1;
  kRpcError = 3;
}

enum SlothNodeRole {
  kCandidate = 0;
  kFollower = 1;
  kLeader = 2;
}

// request node to vote for the requestor
message RequestVoteRequest {
  uint64 term = 1;
  uint64 candidate_id = 2;
  uint64 last_log_index = 3;
  uint64 last_log_term = 4;
}

message RequestVoteResponse {
  RpcStatus status = 1;
  uint64 term = 2;
  bool vote_granted = 3;
}

message Entry {
  uint64 term = 1;
  uint64 log_index = 2;
  string key = 3;
  bytes value = 4;
}

message AppendEntriesRequest {
  uint64 term = 1;
  uint64 pre_log_index = 3;
  uint64 pre_log_term = 4;
  Entry entries = 5;
  uint64 leader_idx = 6;
  uint64 leader_commit_idx = 7;
}

message AppendEntriesResponse {
  RpcStatus status = 1;
  uint64 term = 2;
  bool success = 3;
}

message PutRequest {
  string key = 1;
  bytes value = 2;
}

message PutResponse {
  RpcStatus status = 1;
}

message GetClusterStatusRequest {}

message GetClusterStatusResponse {
  string node_endpoint = 1;
  string node_role = 2;
  string leader_endpoint = 3;
  uint64 current_term = 4;
  int32 node_idx = 5;
}

service SlothNode {

  // raft internal rpc
  rpc RequestVote(RequestVoteRequest) returns(RequestVoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns(AppendEntriesResponse);

  // method for client 
  rpc Put(PutRequest) returns(PutResponse);

  // method for monitor
  rpc GetClusterStatus(GetClusterStatusRequest) returns(GetClusterStatusResponse);
}



