package raft;

option cc_generic_services = true;
option py_generic_services = true;

// the global rpc status
enum RpcStatus {
  // make rpc successfully
  kRpcOk = 0;
  kRpcRejected = 1;
  kRpcError = 3;
}

// request node to vote for the requestor
message RequestVoteRequest {
  optional uint64 term = 1;
  optional uint64 candidate_id = 2;
  optional uint64 last_log_index = 3;
  optional uint64 last_log_term = 4;
}

message RequestVoteResponse {
  optional RpcStatus status = 1;
  optional uint64 term = 2;
  optional bool vote_granted = 3;
}

message Entry {
  optional uint64 term = 1;
  optional uint64 log_index = 2;
  optional string key = 3;
  optional bytes value = 4;
}

message AppendEntriesRequest {
  optional uint64 term = 1;
  optional string leader_id = 2;
  optional uint64 pre_log_index = 3;
  optional uint64 pre_log_term = 4;
  repeated Entry entries = 5;
  optional uint64 leader_index = 6;
}

message AppendEntriesResponse {
  optional RpcStatus status = 1;
  optional uint64 term = 2;
  optional bool success = 3;
}

message PutRequest {
  optional string key = 1;
  optional bytes value = 2;
}

message PutResponse {
  optional RpcStatus status = 1;
}

service RaftNode {
  rpc RequestVote(RequestVoteRequest) returns(RequestVoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns(AppendEntriesResponse);

  // method for leader
  rpc Put(PutRequest) returns(PutResponse);
}


